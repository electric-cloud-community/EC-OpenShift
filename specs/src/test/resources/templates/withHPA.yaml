apiVersion: v1
kind: Template
metadata:
  name: ${serviceName}
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    replicas: 1
    selector:
      app: ${serviceName}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${serviceName}
          deploymentconfig: ${serviceName}
      spec:
        containers:
        - image: repo/image:<% print '${DOCKERIMAGE_VERSION}' %>
          imagePullPolicy: Always
          name: ${serviceName}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: myHeader
                value: value
              path: /tmp/path
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
                - name: test
                  value: value
              path: /private/partaccounts/appinternals/ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: '4'
              memory: 5000M
            requests:
              cpu: '2'
              memory: 3500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: myVolume
              mountPath: /mount/path
              readOnly: true
        volumes:
        - name: myVolume
          configMap:
            name: ${serviceName}-globals
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${serviceName}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${serviceName}
      weight: 100
    wildcardPolicy: None
- apiVersion: autoscaling/v2alpha1
  kind: HorizontalPodAutoscaler
  metadata:
    name: ${autoscalerName}
  spec:
    scaleTargetRef:
      apiVersion: apps/v1beta1
      kind: DeploymentConfig
      name: ${serviceName}
    minReplicas: 1
    maxReplicas: 2
    metrics:
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 90
parameters:
  - name: DOCKERIMAGE_VERSION
    description: "Docker Image Version (tag)"
    value: local
  - name: REPLICAS
    description: "Number of instances"
    value: '2'
