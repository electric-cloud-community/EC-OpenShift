apiVersion: v1
kind: Template
metadata:
  name: ${serviceName}
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    replicas: 1
    selector:
      app: ${serviceName}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${serviceName}
          deploymentconfig: ${serviceName}
      spec:
        containers:
        - image: repo/image:<% print '${PARAM}' %>
          imagePullPolicy: Always
          name: ${serviceName}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: '4'
              memory: 5000M
            requests:
              cpu: '2'
              memory: 3500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

        - image: repo/image2:<% print '${PARAM}' %>
          imagePullPolicy: Always
          name: ${serviceName}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: '4'
              memory: 5000M
            requests:
              cpu: '2'
              memory: 3500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${serviceName}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${serviceName}
    name: ${serviceName}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${serviceName}
      weight: 100
    wildcardPolicy: None

parameters:
  - name: PARAM
    description: "Some parameter"
    value: test

